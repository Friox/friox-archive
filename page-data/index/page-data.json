{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"posts":{"nodes":[{"id":"442d72a2-95d5-5289-a7dd-2f2b4d45b486","excerpt":"Life Cycle React 컴포넌트는 생성부터 소멸까지 일련의 생명주기(Lifecycle) 단계를 거친다. 각 단계에서 특정 작업을 수행할 수 있도록 관련 메서드(클래스 컴포넌트) 또는 Hook(함수형 컴포넌트)이 제공된다. 주요 생명주기 단계와 예시는 다음과 같다. 마운트 (Mounting) 컴포넌트 인스턴스가 생성되어 DOM에 삽입될 때 발생한다.…","frontmatter":{"slug":"deep-dive-20250409","category":"학습일지","createAt":"2025. 04. 09.","title":"React 기초 - 2","description":"임시","tags":["deepdive","react","frontend"]}},{"id":"2e76059f-ab3f-571d-a9eb-b80dd1808829","excerpt":"JSX JSX는 ReactElement를 정의하는 간편한 방법으로, 자바스크립트를 확장한 문법이다. XML 문법 형식으로 ReactElement를 정의할 수 있게 해준다. createElement를 이용해 요소를 정의하면 복잡하고 가독성이 떨어지는데, JSX를 사용하면 더 쉽고 간결하게 작성할 수 있다. JSX는 공식적인 자바스크립트 문법이 아니므로, B…","frontmatter":{"slug":"deep-dive-20250408","category":"학습일지","createAt":"2025. 04. 08.","title":"React 기초 - 1","description":"React 개발의 핵심 구성 요소인 JSX, Rendering, Component, Props, State, Event, Iteration에 대해 학습한 내용을 정리했습니다.","tags":["deepdive","react","frontend"]}},{"id":"3b865490-46d7-53a1-8cc3-4be8c756394c","excerpt":"React 도입 배경 SSR vs CSR Server Side Rendering (SSR) Thymeleaf/JSP 등 서버에서 HTML View 파일을 반환하여 사용자 화면에 노출 Backend Server가 데이터 응답 + View 결정권을 가짐 (단일 책임 원칙 위배 가능성) 새로운 정보/업데이트 시 DOM Tree 전체를 다시 그림 Client S…","frontmatter":{"slug":"deep-dive-20250407","category":"학습일지","createAt":"2025. 04. 07.","title":"React 개념","description":"React 도입 배경(SSR vs CSR), 특징(Virtual DOM, 컴포넌트), 주요 요소, 동작 원리, JSX 개념을 정리했습니다.","tags":["deepdive","react","frontend"]}},{"id":"e700120b-60f8-5b09-be6a-e25a59b16551","excerpt":"버블 정렬 인접한 두 요소를 비교하여 순서가 잘못되어 있으면 교환하는 방식 일련의 과정을 반복하면 가장 큰 요소가 배열의 끝으로 올라가게 됨 각 반복에서 정렬되지 않은 요소들만 비교하며, 가장 큰 요소가 정렬되지 않은 요소 중 마지막 위치에 놓임 시간 복잡도 :  선택 정렬 정렬되지 않은 리스트에서 가장 작은 요소를 선택하여 정렬된 리스트 끝에 배치함 첫…","frontmatter":{"slug":"deep-dive-20250404","category":"학습일지","createAt":"2025. 04. 04.","title":"정렬 알고리즘","description":"다양한 정렬알고리즘 중 버블 정렬, 선택 정렬, 삽입 정렬, 퀵 정렬, 병합 정렬에 대해 정리했습니다.","tags":["deepdive","algorithm","sort"]}},{"id":"b7a86b70-36b8-5111-a4a7-ecb8bb330d95","excerpt":"코딩테스트 유형 손 코딩 : 개발 환경 없이 A4 용지나 화이트보드에 직접 코드 작성, 가독성과 논리적 사고를 평가 과제형 테스트 : 일정 기간을 두고 문제를 해결, 설계 능력과 코드 품질을 검증 문제형 테스트 : 알고리즘 문제 풀이, 제한 시간 내에 최적의 해법을 도출해야 함 복잡도 시간 복잡도 (Time Complexity) 알고리즘이 실행되는 데 걸…","frontmatter":{"slug":"deep-dive-20250403","category":"학습일지","createAt":"2025. 04. 03.","title":"알고리즘과 코딩테스트","description":"코딩테스트의 다양한 유형, 알고리즘 복잡도, 효율적인 알고리즘 설계 팁을 정리했습니다. 또한 단위테스트와 통합테스트의 중요성, 데이터베이스 레플리케이션 구조, 협업도구 활용법 등 실무와 관련된 내용도 다룹니다.","tags":["deepdive","algorithm"]}},{"id":"34eaab4e-0e74-5eca-84b0-fab1d6c43108","excerpt":"Spring Dicovery Client 로드밸런서와 그 안에 등록된 서비스에 대해 가장 낮은 수준으로 접근할 수 있음. 스프링 클라우드 로드밸런서 클라이언트에 등록된 모든 서비스와 해당 URL을 쿼리할 수 있다. RestTemplate Spring Framework에서 제공하는 HTTP Client 라이브러리 HTTP Method를 쉽게 사용할 수 있게…","frontmatter":{"slug":"deep-dive-20250401","category":"학습일지","createAt":"2025. 04. 01.","title":"Spring Cloud, MSA를 위한 핵심기술","description":"Spring Cloud와 MSA 환경에서 사용하는 기술을 학습하고 정리했습니다. Spring Discovery Client, RestTemplate, 인증방식, Config Server 등 주요 개념과 간단한 구현 방법을 다룹니다.","tags":["deepdive","devops","springcloud"]}},{"id":"d3303658-d31e-5618-b4cb-fa3068838c9f","excerpt":"MSA Micro Service Architecture 소프트웨어 개발방식 중 하나로, 커다란 어플리케이션을 독립적으로 배포, 운영하는 방식 할 수 있는대로 작은 서비스 단위로 나누어 개발하는 접근 방식이다. 각 서비스는 고유한 기능을 담당하며, 다른 서비스들과 통신하며 하나의 어플리케이션을 이룬다. (API를 통해 통신함) 확장성, 유지보수 용이성, 독…","frontmatter":{"slug":"deep-dive-20250331","category":"학습일지","createAt":"2025. 03. 31.","title":"MSA","description":"마이크로서비스 아키텍처(MSA)는 애플리케이션을 독립적인 작은 서비스들로 분리하여 개발, 배포, 운영하는 소프트웨어 설계방식입니다. MSA의 개념과 장단점을 기준으로 모놀리식 아키텍처와 비교해보고, Spring에서 이를 구현하기 위한 프레임워크와 도구를 알아봅니다.","tags":["deepdive","devops","springcloud","eureka"]}}]},"series":{"group":[{"totalCount":7,"fieldValue":"deepdive backend 3rd","nodes":[{"frontmatter":{"slug":"deep-dive-20250409","createAt":"2025. 04. 09.","title":"React 기초 - 2"}}]}]},"about":null,"site":{"siteMetadata":{"siteUrl":"https://blog.friox.dev"}}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}