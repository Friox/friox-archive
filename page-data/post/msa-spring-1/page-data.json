{"componentChunkName":"component---src-templates-post-tsx","path":"/post/msa-spring-1/","result":{"data":{"post":{"id":"1edd8d3c-9800-516d-98b1-f044dff2f4b2","excerpt":"kakao x goorm deepdive 백엔드 3회차 이 게시물은 해당 과정 참여 중 별도로 학습한 내용을 정리한 것입니다. Spring Dicovery Client 로드밸런서와 그 안에 등록된 서비스에 대해 가장 낮은 수준으로 접근할 수 있음. 스프링 클라우드 로드밸런서 클라이언트에 등록된 모든 서비스와 해당 URL을 쿼리할 수 있다. RestTemp…","html":"<blockquote>\n<p><strong>kakao x goorm deepdive 백엔드 3회차</strong><br>\n이 게시물은 해당 과정 참여 중 별도로 학습한 내용을 정리한 것입니다.</p>\n</blockquote>\n<h2 id=\"spring-dicovery-client\" style=\"position:relative;\"><a href=\"#spring-dicovery-client\" aria-label=\"spring dicovery client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Dicovery Client</h2>\n<p>로드밸런서와 그 안에 등록된 서비스에 대해 가장 낮은 수준으로 접근할 수 있음.<br>\n스프링 클라우드 로드밸런서 클라이언트에 등록된 모든 서비스와 해당 URL을 쿼리할 수 있다.</p>\n<h2 id=\"resttemplate\" style=\"position:relative;\"><a href=\"#resttemplate\" aria-label=\"resttemplate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RestTemplate</h2>\n<ul>\n<li>Spring Framework에서 제공하는 HTTP Client 라이브러리</li>\n<li>HTTP Method를 쉽게 사용할 수 있게 도와주는 메서드를 제공한다</li>\n<li>동적 URL을 쉽게 구성할 수 있다.</li>\n<li>요청, 응답에 대한 객체 변환을 자동으로 처리하며, 헤더관리 등 다양한 기능 제공</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<p>Discovery Client를 직접 호출하면 서비스 리스트를 얻을 수 있지만,<br>\n호출할 서비스 인스턴스를 선정할 책임은 사용자에게 있다.<br>\n⇒ 로드밸런서를 이용하지 못함.</p>\n<p>또한 코드에서 서비스를 호출하는 데 사용할 URL을 직접 생성해야한다.</p>\n<h3 id=\"loadbalanced\" style=\"position:relative;\"><a href=\"#loadbalanced\" aria-label=\"loadbalanced permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@LoadBalanced</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@LoadBalanced</span>\n<span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">getRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrganizationRestTemplateClient</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Order</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> restExchange <span class=\"token operator\">=</span>\n\t\t\trestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token string\">\"http://order-service/v1/order/{orderId}\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token class-name\">Organization</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> restExchange<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Spring Cloud Discovery Client를 직접 사용하지 않는다.</li>\n<li><code>restTemplate.exchange()</code> 호출에 사용된 URL에서 서버 이름은<br>\nEureka에 등록할 때 사용된 서비스키의 애플리케이션 ID와 일치한다.</li>\n</ul>\n<h2 id=\"인증-시점\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%8B%9C%EC%A0%90\" aria-label=\"인증 시점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 시점</h2>\n<h3 id=\"api-gateway-jwt\" style=\"position:relative;\"><a href=\"#api-gateway-jwt\" aria-label=\"api gateway jwt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API Gateway JWT</h3>\n<ul>\n<li>Spring Cloud Gateway에서 JWT 토큰을 검증하는 방식</li>\n<li>유효한 경우 <code>Authenication</code> 객체를 생성하고 각 서비스로 전달</li>\n<li>검증된 사용자 정보를 각 서비스에 전파할 수 있음</li>\n</ul>\n<blockquote>\n<p><strong>장점</strong></p>\n<ul>\n<li>중앙화된 인증 처리 : 모든 서비스가 Gateway에서 인증되므로 서비스단에서 검증할 필요 없음</li>\n<li>보안성 향상 : 인증 처리가 중앙에서 이루어지기 때문에 보안 관련 로직이 통합적으로 관리 됨</li>\n<li>재사용성 : 동일한 JWT 검증 로직을 중복해서 작성할 필요가 없다</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>단점</strong></p>\n<ul>\n<li>단일 장애 지점(SPOF) : Gateway가 죽으면 모든 요청을 처리할 수 없게 된다</li>\n<li>성능 문제 : 인증 로직이 Gateway에 집중되면 과부하가 걸릴 가능성이 있다</li>\n<li>복잡성 증가 : 사용자 정보를 각 마이크로서비스로 전달하는 방식을 잘 설계해야 함<br>\n각 서비스는 미리 검증된 <code>Authenication</code> 객체에만 의존하게 해야한다.</li>\n</ul>\n</blockquote>\n<h3 id=\"각-서비스에서-jwt-토큰-검증\" style=\"position:relative;\"><a href=\"#%EA%B0%81-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-jwt-%ED%86%A0%ED%81%B0-%EA%B2%80%EC%A6%9D\" aria-label=\"각 서비스에서 jwt 토큰 검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각 서비스에서 JWT 토큰 검증</h3>\n<ul>\n<li>모든 마이크로서비스에서 JWT 검증 로직을 직접 구현한다.</li>\n<li>각 서비스는 요청 시 헤더에 있는 JWT를 파싱하여 인증을 수행한다.</li>\n</ul>\n<blockquote>\n<p><strong>장점</strong></p>\n<ul>\n<li>독립성 : API Gateway가 필요없거나 가벼운 역할만 하기때문에 독립적으로 운영 가능</li>\n<li>확장성 : 서비스마다 독립적으로 확장될 수 있으므로, Gateway의 과부하를 피할 수 있다</li>\n<li>유연성 : 각 서비스는 인증 로직에 필요한 변경 사항을 빠르게 반영할 수 있다</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>단점</strong></p>\n<ul>\n<li>코드 중복 : 모든 서비스에서 JWT 검증 로직을 구현해야해서 코드 중복이 발생할 수 있음</li>\n<li>유지 보수 : JWT 검증 로직에 변경이 생기면 각 서비스에서 해당 로직을 업데이트 해야 함</li>\n<li>성능 저하 : 각 서비스가 동일한 작업을 반복적으로 수행하게 되어 성능 저하 발생</li>\n</ul>\n</blockquote>\n<h3 id=\"oauth20-토큰-검증\" style=\"position:relative;\"><a href=\"#oauth20-%ED%86%A0%ED%81%B0-%EA%B2%80%EC%A6%9D\" aria-label=\"oauth20 토큰 검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth2.0 토큰 검증</h3>\n<blockquote>\n<p><strong>OAuth2.0</strong></p>\n<ul>\n<li>인증과 권한 부여를 위한 표준 프로토콜</li>\n<li>사용자가 다른 서비스에 자신의 자원에 접근할 수 있도록 허용하는 안전한 방법을 제공</li>\n<li>사용자는 자신의 비밀번호를 공유하지 않고도 3rd party app이 자원에 접근할 수 있도록 함</li>\n</ul>\n</blockquote>\n<ul>\n<li>OAuth2 인증 서버를 구현하여 각 마이크로서비스가 JWT의 유효성을 확인하는 방식</li>\n<li>각 서비스는 JWT를 직접 검증하지 않고, OAuth2 인증 서버에 유효성 검증을 요청 함</li>\n<li>각 서비스는 응답을 바탕으로 인증 처리를 수행한다</li>\n<li>보통 직접 구현한다기보다 Google, Kakao 등의 인증 서버를 활용하는 방법이 가장 간편하다</li>\n</ul>\n<blockquote>\n<p><strong>장점</strong></p>\n<ul>\n<li>토큰 관리의 유연성 : JWT뿐만아니라 다른 인증방식의 토큰도 검증할 수 있다</li>\n<li>중앙화된 검증 : 모든 검증로직이 OAuth2 인증 서버에서 이루어진다</li>\n<li>보안성 : 토큰상태(유효성, 만료)를 중앙에서 관리한다</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>단점</strong></p>\n<ul>\n<li>추가적인 네트워크 요청 : 중앙 인증서버를 거치기때문에 지연시간이 생긴다</li>\n<li>복잡성 증가 : OAuth2 서버를 추가적으로 구성하고 검증 로직을 별도로 구현해야 함</li>\n<li>고가용성 필요 : 인증 서버가 중단되면 서비스가 인증을 처리하지 못한다</li>\n</ul>\n</blockquote>\n<h3 id=\"그래서-뭘-사용할까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%98-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"그래서 뭘 사용할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 뭘 사용할까?</h3>\n<ul>\n<li>API Gateway 방식은 관리 및 유지보수가 중요할때</li>\n<li>서비스 검증은 서비스 간 독립성을 보장해야할때</li>\n<li>OAuth2 인증방식은 서드파티 애플리케이션 연동이 필요할때</li>\n</ul>\n<h2 id=\"config-server\" style=\"position:relative;\"><a href=\"#config-server\" aria-label=\"config server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config Server</h2>\n<ul>\n<li>분산 시스템에서 설정 정보를 중앙에서 관리할 수 있도록 지원하는 서버</li>\n<li>여러 서비스의 설정 파일을 외부 저장소에 분리하여 관리한다</li>\n<li>설정 변경 시 서비스의 재배포 없이 변경 사항을 반영할 수 있다</li>\n<li>MSA 환경에서는 배포되는 실제 코드와 구성정보를 완전히 분리해야한다</li>\n<li>여러 환경에서도 절대 변경 되지 않는 불변 애플리케이션 이미지를 빌드한다</li>\n<li>서버가 시작될때 서비스가 읽어오는 환경변수 또는 중앙저장소를 통해 구성정보를 주입한다</li>\n</ul>\n<blockquote>\n<p><strong>장점</strong></p>\n<ul>\n<li>유지보수 간소화 : 여러 서비스의 설정 정보를 중앙에서 관리한다</li>\n<li>중복 설정 제거 : 중복 설정을 제거하여 일관된 업데이트 적용이 가능하다</li>\n<li>무중단 : 재배포 없이 설정 변경이 가능하여 운영 효율성이 높다</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>단점</strong></p>\n<ul>\n<li>Config Server에 장에가 발생하면 모든 서비스에 영향을 주는 단일 장애 지점이 될 수 있다</li>\n<li>민감한 정보 보호를 위한 추가적인 보안 조치가 필요하다</li>\n</ul>\n</blockquote>\n<h3 id=\"구현-방법\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\" aria-label=\"구현 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 방법</h3>\n<ol>\n<li>의존성 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'org.springframework.cloud:spring-cloud-config-server'</span></code></pre></div>\n<ol start=\"2\">\n<li>메인 클래스에 어노테이션 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableConfigServer</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigServerApplication</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tSpringApplication<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ConfigServerApplication<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>설정 파일 작성 (<code>application.yml</code>)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8888</span>\n\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>service\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">git</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/your<span class=\"token punctuation\">-</span>repository\n          <span class=\"token key atrule\">search-paths</span><span class=\"token punctuation\">:</span> /config<span class=\"token punctuation\">-</span>files\n          <span class=\"token key atrule\">default-label</span><span class=\"token punctuation\">:</span> main</code></pre></div>\n<ol start=\"4\">\n<li>[인스턴스 측 설정] 의존성 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-config'</span>\nimplementation <span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-bootstrap'</span></code></pre></div>\n<ol start=\"5\">\n<li><code>bootstrap.yml</code> 작성 (<code>application.yml</code> 보다 먼저 로드됨)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># bootstrap.yml</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>스프링 클라우드 컨피그 서버 주소<span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>읽어올 파일<span class=\"token punctuation\">]</span>\n\t\t\t\n<span class=\"token comment\"># application.yml</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">import</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span> classpath<span class=\"token punctuation\">:</span>/bootstrap.yml</code></pre></div>\n<h2 id=\"spring-actuator\" style=\"position:relative;\"><a href=\"#spring-actuator\" aria-label=\"spring actuator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Actuator</h2>\n<ul>\n<li>Spring Boot 애플리케이션의 운영 환경에서 모니터링 및 관리를 위한 기능을 제공</li>\n<li>애플리케이션 상태, 메트릭, 환경설정 등의 정보를 실시간으로 확인할 수 있다</li>\n<li>애플리케이션의 로깅 레벨 변경, 설정 갱신, 애플리케이션 재시작 등 관리 작업을 수행할 수 있다</li>\n<li>필요에 따라 사용자 정의 엔드포인트를 추가하여 기능을 확장할 수 있다</li>\n</ul>\n<h3 id=\"설정-방법\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"설정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 방법</h3>\n<ol>\n<li>의존성 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-actuator'</span></code></pre></div>\n<ol start=\"2\">\n<li>설정</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">### 기본 경로 수정</span>\n<span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">base-path</span><span class=\"token punctuation\">:</span> /management\n\t\t\t\n<span class=\"token comment\">### 엔드포인트의 노출 여부 제어</span>\n<span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> health<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">,</span>beans<span class=\"token punctuation\">,</span>conditions\n\t\t\t\t<span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> threaddump<span class=\"token punctuation\">,</span> heapdump</code></pre></div>\n<h3 id=\"엔드포인트\" style=\"position:relative;\"><a href=\"#%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-label=\"엔드포인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엔드포인트</h3>\n<ul>\n<li>기능에 따라 의존성이나 Bean 등록이 필요할 수 있다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>엔드포인트</strong></th>\n<th><strong>설명</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><code>/actuator/health</code></strong></td>\n<td>애플리케이션의 상태 정보 제공</td>\n</tr>\n<tr>\n<td><strong><code>/actuator/metrics</code></strong></td>\n<td>CPU, 메모리 사용량 등 메트릭 정보 제공</td>\n</tr>\n<tr>\n<td><strong><code>/actuator/env</code></strong></td>\n<td>환경 변수 및 설정 값 조회</td>\n</tr>\n<tr>\n<td><strong><code>/actuator/beans</code></strong></td>\n<td>애플리케이션에 등록된 Spring Bean 목록 조회</td>\n</tr>\n<tr>\n<td><strong><code>/actuator/loggers</code></strong></td>\n<td>로깅 레벨 확인 및 변경</td>\n</tr>\n<tr>\n<td><strong><code>/actuator/httptrace</code></strong></td>\n<td>최근 HTTP 요청/응답 기록 조회 (추가 설정 필요)</td>\n</tr>\n<tr>\n<td><strong><code>/actuator/refresh</code></strong></td>\n<td>설정 정보 갱신 (Spring Cloud Config와 함께 사용 시 유용)</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"slug":"msa-spring-1","title":"Spring Cloud, MSA를 위한 핵심기술","description":"Spring Cloud와 MSA 환경에서 사용하는 기술을 학습하고 정리했습니다. Spring Discovery Client, RestTemplate, 인증방식, Config Server 등 주요 개념과 간단한 구현 방법을 다룹니다.","createAt":"2025. 04. 01.","updateAt":null,"category":"개발","tags":["DevOps","SpringCloud","DiscoveryClient","ConfigServer","Deepdive"],"series":"deepdive - MSA"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#spring-dicovery-client\">Spring Dicovery Client</a></p>\n</li>\n<li>\n<p><a href=\"#resttemplate\">RestTemplate</a></p>\n<ul>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n<li><a href=\"#loadbalanced\"><code>@LoadBalanced</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%8B%9C%EC%A0%90\">인증 시점</a></p>\n<ul>\n<li><a href=\"#api-gateway-jwt\">API Gateway JWT</a></li>\n<li><a href=\"#%EA%B0%81-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-jwt-%ED%86%A0%ED%81%B0-%EA%B2%80%EC%A6%9D\">각 서비스에서 JWT 토큰 검증</a></li>\n<li><a href=\"#oauth20-%ED%86%A0%ED%81%B0-%EA%B2%80%EC%A6%9D\">OAuth2.0 토큰 검증</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%98-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\">그래서 뭘 사용할까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#config-server\">Config Server</a></p>\n<ul>\n<li><a href=\"#%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\">구현 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-actuator\">Spring Actuator</a></p>\n<ul>\n<li><a href=\"#%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\">설정 방법</a></li>\n<li><a href=\"#%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8\">엔드포인트</a></li>\n</ul>\n</li>\n</ul>"},"seriesList":{"nodes":[{"frontmatter":{"slug":"msa-study","title":"MSA"}},{"frontmatter":{"slug":"msa-spring-1","title":"Spring Cloud, MSA를 위한 핵심기술"}}]},"site":{"siteMetadata":{"siteUrl":"https://blog.friox.dev"}}},"pageContext":{"id":"1edd8d3c-9800-516d-98b1-f044dff2f4b2","series":"deepdive - MSA"}},"staticQueryHashes":[],"slicesMap":{}}